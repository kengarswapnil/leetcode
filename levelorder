import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;




/**
 * 
 */

    class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;
    
        TreeNode(int val) {
            this.val = val;
            left = null;
            right = null;
        }

    
}

public class LevelOrder {

    public List <List <Integer>>levelOrder(TreeNode root){
        List<List<Integer>> result =new ArrayList<>();
        if(root == null){
            return result ;
        }

        Queue<TreeNode>queue =new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            int levelsize =queue.size();
            List<Integer>currentlevel = new ArrayList<>();
            for(int i=0;i<levelsize;i++){
                TreeNode currentNode=queue.poll();
                currentlevel.add(currentNode.val);
                if(currentNode.left!=null){
                    queue.offer(currentNode.left );

                }
                if(currentNode.right!=null){
                     
                    queue.offer(currentNode.right);
                }
            }
            result.add(currentlevel);

            
            
        }
        return result;

    }
    public static void main(String[] args)
    {
        Scanner sc =new Scanner(System.in);
        LevelOrder l= new LevelOrder();
        

        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);

        List<List<Integer>> result = l.levelOrder(root);
        System.out.println(result);

        sc.close();
    }
}


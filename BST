

public class BST {

    public class Node{
        int value;
        int height;
        Node left;
        Node right;

        public  Node( int value){
            this.value=value;
        }

        public int getvalue(){
            return value;
        }
    }

    

    private Node root;

    public  BST(){
          root =null;
    }

    //height of tree

    public int height (Node node){
        if(node==null){
            return -1;
        }
        return node.height;
    }

    //root Empty

    public boolean isEmpty(){
        return root==null;
    }

    //insert

    public Node insert(int value ,Node node){
        //base case
        if(node==null){
            node = new Node(value);
            return node; 
        }
        if(value < node.value){ 
            node.left=insert(value,node.left);
        }

        else if (value > node.value) {
            node.right = insert(value, node.right);
        }
        node.height=Math.max(height(node.left), height(node.right))+1;
        return node;
    }

    public boolean balanced(){
        return balanced(root);
    }

    private boolean balanced(Node node){
        if(node==null){
            return true;
        }
        return Math.abs(height(node.left)- height(node.right))<=1 && balanced(node.left)&&balanced(node.right);
    }

    public void display(){
        display(this.root,"");
    }

    private void display(Node node ,String details){
        if(node==null){
            return ;
        }
        System.out.println(details+node.value);
        display(node.left, details+" L--");
        display(node.right, details+" R--");

    }
    
    public static void main(String[] args) {
       // Scanner sc= new Scanner(System.in);

        BST s = new BST();
        s.root =s .insert(10, s.root);
        s.root =s .insert(9, s.root);
        s.root =s .insert(20, s.root);
        s.root =s .insert(30, s.root);
        s.root =s .insert(7, s.root);
        s.root =s .insert(8, s.root);
        s.display();

    }
}
